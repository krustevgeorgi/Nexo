{"ast":null,"code":"var _jsxFileName = \"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/TabsContent/Operations.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport '../styles.scss';\nimport { useSelector } from \"react-redux\";\nimport { DashboardRow, Modal } from \"../../../components\";\nimport { ethers } from \"ethers\";\nimport { WETH_ADDRESS } from \"../../../constants\";\nimport WETH from '../../../WETH.json';\nimport { CheckCircle } from \"@material-ui/icons\";\nimport { ClipLoader } from \"react-spinners\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst etherscan = 'https://sepolia.etherscan.io/';\nconst Operations = () => {\n  _s();\n  const {\n    smallScreen,\n    connection,\n    provider,\n    signer\n  } = useSelector(state => state.common);\n  const [ethToConvert, setEthToConvert] = useState('0');\n  const [swapping, setSwapping] = useState(false);\n  const [lastTransaction, setLastTransaction] = useState(null);\n  const swap = async () => {\n    if (ethToConvert === '0' || !ethToConvert) return alert('Please enter amount larger than 0!');\n    setSwapping(true);\n    const signer = await provider.getSigner();\n    const wethContract = new ethers.Contract(WETH_ADDRESS, WETH.abi, signer);\n    try {\n      const transaction = await wethContract.deposit({\n        from: connection.address,\n        value: ethers.utils.parseEther(ethToConvert)\n      });\n      const res = await transaction.wait();\n      console.log(res);\n      setSwapping(false);\n      setLastTransaction(res);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"wallet\",\n    className: smallScreen ? 'm' : '',\n    children: [/*#__PURE__*/_jsxDEV(DashboardRow, {\n      title: \"Convert your ETH to WETH\",\n      noAnimation: true,\n      onGoClicked: swap,\n      loading: swapping,\n      value: /*#__PURE__*/_jsxDEV(CustomInput, {\n        value: ethToConvert,\n        onChange: setEthToConvert,\n        balance: ethers.utils.formatEther(connection.ethBalance)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DashboardRow, {\n      title: \"NEXO Balance\",\n      value: ethers.utils.formatEther(connection.nexoBalance)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Converting\",\n      text: \"We are processing your transaction, please wait.\",\n      icon: /*#__PURE__*/_jsxDEV(ClipLoader, {\n        size: \"18\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 26\n      }, this),\n      visible: swapping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      visible: lastTransaction,\n      icon: /*#__PURE__*/_jsxDEV(CheckCircle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 23\n      }, this),\n      title: \"Transaction sent\",\n      onOk: () => setLastTransaction(null),\n      text: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"You can see your transaction in the\\xA0\", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `${etherscan}/tx/${lastTransaction && lastTransaction.transactionHash}`,\n          children: \"block explorer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n_s(Operations, \"qbexDqq0iriZ3+vZ5gFGDST8Z4g=\", false, function () {\n  return [useSelector];\n});\n_c = Operations;\nconst CustomInput = _ref => {\n  let {\n    onChange,\n    value,\n    balance\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row-input\",\n    children: [balance && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"balance\",\n      onClick: () => onChange(balance),\n      children: [\"Total \", balance]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"0.0\",\n      value: value,\n      type: \"number\",\n      onChange: e => onChange(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_c2 = CustomInput;\nexport default Operations;\nvar _c, _c2;\n$RefreshReg$(_c, \"Operations\");\n$RefreshReg$(_c2, \"CustomInput\");","map":{"version":3,"names":["React","useState","useSelector","DashboardRow","Modal","ethers","WETH_ADDRESS","WETH","CheckCircle","ClipLoader","etherscan","Operations","smallScreen","connection","provider","signer","state","common","ethToConvert","setEthToConvert","swapping","setSwapping","lastTransaction","setLastTransaction","swap","alert","getSigner","wethContract","Contract","abi","transaction","deposit","from","address","value","utils","parseEther","res","wait","console","log","err","formatEther","ethBalance","nexoBalance","transactionHash","CustomInput","onChange","balance","e","target"],"sources":["/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/TabsContent/Operations.tsx"],"sourcesContent":["import React, {FC, useState} from \"react\";\nimport '../styles.scss';\nimport {useSelector} from \"react-redux\";\nimport {State} from \"../../../store\";\nimport {DashboardRow, Modal} from \"../../../components\";\nimport {ethers} from \"ethers\";\nimport {WETH_ADDRESS} from \"../../../constants\";\nimport WETH from '../../../WETH.json'\nimport {CheckCircle, CheckOutlined} from \"@material-ui/icons\";\nimport {ClipLoader} from \"react-spinners\";\n\nconst etherscan = 'https://sepolia.etherscan.io/'\n\nconst Operations: FC = () => {\n    const {smallScreen, connection, provider, signer} = useSelector((state: State) => state.common);\n    const [ethToConvert, setEthToConvert] = useState<string>('0')\n    const [swapping, setSwapping] = useState<boolean>(false)\n    const [lastTransaction, setLastTransaction] = useState<any>(null)\n\n    const swap = async () => {\n        if (ethToConvert === '0' || !ethToConvert) return alert('Please enter amount larger than 0!')\n        setSwapping(true)\n        const signer = await provider!.getSigner()\n        const wethContract = new ethers.Contract(WETH_ADDRESS, WETH.abi, signer);\n        try {\n            const transaction = await wethContract.deposit({\n                from: connection!.address,\n                value: ethers.utils.parseEther(ethToConvert)\n            });\n            const res = await transaction.wait();\n            console.log(res);\n            setSwapping(false)\n            setLastTransaction(res)\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    return (\n        <div id='wallet' className={smallScreen ? 'm' : ''}>\n            <DashboardRow title='Convert your ETH to WETH' noAnimation onGoClicked={swap} loading={swapping} value={\n                <CustomInput value={ethToConvert} onChange={setEthToConvert}\n                             balance={ethers.utils.formatEther(connection!.ethBalance)}\n                />\n            }/>\n            <DashboardRow title='NEXO Balance' value={ethers.utils.formatEther(connection!.nexoBalance)}/>\n\n            <Modal title='Converting' text='We are processing your transaction, please wait.'\n                   icon={<ClipLoader size='18'/>} visible={swapping} />\n\n\n            <Modal\n                visible={lastTransaction}\n                icon={<CheckCircle/>}\n                title='Transaction sent'\n                onOk={() => setLastTransaction(null)}\n                text={<>\n                        You can see your transaction in the&nbsp;\n                        <a href={`${etherscan}/tx/${lastTransaction && lastTransaction.transactionHash}`}>block explorer</a>\n                    </>}\n            />\n        </div>\n    )\n}\n\ninterface CustomInputProps {\n    onChange: (val: string) => void;\n    value: string;\n    balance?: any;\n}\n\nconst CustomInput: FC<CustomInputProps> = ({onChange, value, balance}) => {\n    return (\n        <div className='row-input'>\n            {balance && <span className='balance' onClick={() => onChange(balance)}>Total {balance}</span>}\n            <input\n                placeholder='0.0'\n                value={value}\n                type='number'\n                onChange={(e) => onChange(e.target.value)}\n            />\n        </div>\n    )\n}\n\nexport default Operations;"],"mappings":"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"},"metadata":{},"sourceType":"module"}