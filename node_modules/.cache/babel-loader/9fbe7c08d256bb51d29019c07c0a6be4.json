{"ast":null,"code":"var cssUnit = {\n  cm: true,\n  mm: true,\n  in: true,\n  px: true,\n  pt: true,\n  pc: true,\n  em: true,\n  ex: true,\n  ch: true,\n  rem: true,\n  vw: true,\n  vh: true,\n  vmin: true,\n  vmax: true,\n  \"%\": true\n};\n/**\n * If size is a number, append px to the value as default unit.\n * If size is a string, validate against list of valid units.\n * If unit is valid, return size as is.\n * If unit is invalid, console warn issue, replace with px as the unit.\n *\n * @param {(number | string)} size\n * @return {LengthObject} LengthObject\n */\nexport function parseLengthAndUnit(size) {\n  if (typeof size === \"number\") {\n    return {\n      value: size,\n      unit: \"px\"\n    };\n  }\n  var value;\n  var valueString = (size.match(/^[0-9.]*/) || \"\").toString();\n  if (valueString.includes(\".\")) {\n    value = parseFloat(valueString);\n  } else {\n    value = parseInt(valueString, 10);\n  }\n  var unit = (size.match(/[^0-9]*$/) || \"\").toString();\n  if (cssUnit[unit]) {\n    return {\n      value: value,\n      unit: unit\n    };\n  }\n  console.warn(\"React Spinners: \" + size + \" is not a valid css value. Defaulting to \" + value + \"px.\");\n  return {\n    value: value,\n    unit: \"px\"\n  };\n}\n/**\n * Take value as an input and return valid css value\n *\n * @param {(number | string)} value\n * @return {string} valid css value\n */\nexport function cssValue(value) {\n  var lengthWithunit = parseLengthAndUnit(value);\n  return \"\" + lengthWithunit.value + lengthWithunit.unit;\n}","map":{"version":3,"names":["cssUnit","cm","mm","in","px","pt","pc","em","ex","ch","rem","vw","vh","vmin","vmax","parseLengthAndUnit","size","value","unit","valueString","match","toString","includes","parseFloat","parseInt","console","warn","cssValue","lengthWithunit"],"sources":["/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/node_modules/react-spinners/esm/helpers/unitConverter.js"],"sourcesContent":["var cssUnit = {\n    cm: true,\n    mm: true,\n    in: true,\n    px: true,\n    pt: true,\n    pc: true,\n    em: true,\n    ex: true,\n    ch: true,\n    rem: true,\n    vw: true,\n    vh: true,\n    vmin: true,\n    vmax: true,\n    \"%\": true\n};\n/**\n * If size is a number, append px to the value as default unit.\n * If size is a string, validate against list of valid units.\n * If unit is valid, return size as is.\n * If unit is invalid, console warn issue, replace with px as the unit.\n *\n * @param {(number | string)} size\n * @return {LengthObject} LengthObject\n */\nexport function parseLengthAndUnit(size) {\n    if (typeof size === \"number\") {\n        return {\n            value: size,\n            unit: \"px\"\n        };\n    }\n    var value;\n    var valueString = (size.match(/^[0-9.]*/) || \"\").toString();\n    if (valueString.includes(\".\")) {\n        value = parseFloat(valueString);\n    }\n    else {\n        value = parseInt(valueString, 10);\n    }\n    var unit = (size.match(/[^0-9]*$/) || \"\").toString();\n    if (cssUnit[unit]) {\n        return {\n            value: value,\n            unit: unit\n        };\n    }\n    console.warn(\"React Spinners: \" + size + \" is not a valid css value. Defaulting to \" + value + \"px.\");\n    return {\n        value: value,\n        unit: \"px\"\n    };\n}\n/**\n * Take value as an input and return valid css value\n *\n * @param {(number | string)} value\n * @return {string} valid css value\n */\nexport function cssValue(value) {\n    var lengthWithunit = parseLengthAndUnit(value);\n    return \"\" + lengthWithunit.value + lengthWithunit.unit;\n}\n"],"mappings":"AAAA,IAAIA,OAAO,GAAG;EACVC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,GAAG,EAAE,IAAI;EACTC,EAAE,EAAE,IAAI;EACRC,EAAE,EAAE,IAAI;EACRC,IAAI,EAAE,IAAI;EACVC,IAAI,EAAE,IAAI;EACV,GAAG,EAAE;AACT,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkB,CAACC,IAAI,EAAE;EACrC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAO;MACHC,KAAK,EAAED,IAAI;MACXE,IAAI,EAAE;IACV,CAAC;EACL;EACA,IAAID,KAAK;EACT,IAAIE,WAAW,GAAG,CAACH,IAAI,CAACI,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,EAAEC,QAAQ,EAAE;EAC3D,IAAIF,WAAW,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3BL,KAAK,GAAGM,UAAU,CAACJ,WAAW,CAAC;EACnC,CAAC,MACI;IACDF,KAAK,GAAGO,QAAQ,CAACL,WAAW,EAAE,EAAE,CAAC;EACrC;EACA,IAAID,IAAI,GAAG,CAACF,IAAI,CAACI,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,EAAEC,QAAQ,EAAE;EACpD,IAAIrB,OAAO,CAACkB,IAAI,CAAC,EAAE;IACf,OAAO;MACHD,KAAK,EAAEA,KAAK;MACZC,IAAI,EAAEA;IACV,CAAC;EACL;EACAO,OAAO,CAACC,IAAI,CAAC,kBAAkB,GAAGV,IAAI,GAAG,2CAA2C,GAAGC,KAAK,GAAG,KAAK,CAAC;EACrG,OAAO;IACHA,KAAK,EAAEA,KAAK;IACZC,IAAI,EAAE;EACV,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,QAAQ,CAACV,KAAK,EAAE;EAC5B,IAAIW,cAAc,GAAGb,kBAAkB,CAACE,KAAK,CAAC;EAC9C,OAAO,EAAE,GAAGW,cAAc,CAACX,KAAK,GAAGW,cAAc,CAACV,IAAI;AAC1D"},"metadata":{},"sourceType":"module"}