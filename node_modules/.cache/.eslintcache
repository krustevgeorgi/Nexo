[{"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/index.tsx":"1","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/reportWebVitals.ts":"2","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/App.tsx":"3","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/store/configureStore.ts":"4","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/store/index.ts":"5","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/index.tsx":"6","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/store/common/reducers.ts":"7","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/Layout.tsx":"8","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/store/common/types.ts":"9","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/Header/HeaderD.tsx":"10","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/Header/HeaderM.tsx":"11","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/Body/index.tsx":"12","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/Body/Body.tsx":"13","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/index.tsx":"14","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Home/index.tsx":"15","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/index.tsx":"16","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Home/Home.tsx":"17","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/Dashboard.tsx":"18","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/TabsContent/index.ts":"19","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/index.tsx":"20","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/TabsContent/Connection.tsx":"21","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/TabsContent/Wallet.tsx":"22","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/TabsContent/Operations.tsx":"23","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/ConnectBox/index.ts":"24","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/Modal/index.ts":"25","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/DashboardRow/index.ts":"26","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/ConnectBox/ConnectBox.tsx":"27","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/constants/index.ts":"28","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/DashboardRow/DashboardRow.tsx":"29","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/Modal/Modal.tsx":"30","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/store/common/actions.ts":"31"},{"size":709,"mtime":1655760998980,"results":"32","hashOfConfig":"33"},{"size":425,"mtime":1654608796563,"results":"34","hashOfConfig":"33"},{"size":483,"mtime":1666177420266,"results":"35","hashOfConfig":"33"},{"size":757,"mtime":1654701476488,"results":"36","hashOfConfig":"33"},{"size":386,"mtime":1654701437633,"results":"37","hashOfConfig":"33"},{"size":54,"mtime":1654701770459,"results":"38","hashOfConfig":"33"},{"size":1154,"mtime":1666271180146,"results":"39","hashOfConfig":"33"},{"size":560,"mtime":1666208152869,"results":"40","hashOfConfig":"33"},{"size":1317,"mtime":1666271142118,"results":"41","hashOfConfig":"33"},{"size":878,"mtime":1666211306745,"results":"42","hashOfConfig":"33"},{"size":1429,"mtime":1666211310493,"results":"43","hashOfConfig":"33"},{"size":48,"mtime":1654700981603,"results":"44","hashOfConfig":"33"},{"size":599,"mtime":1666204699229,"results":"45","hashOfConfig":"33"},{"size":89,"mtime":1666200942607,"results":"46","hashOfConfig":"33"},{"size":48,"mtime":1666177264236,"results":"47","hashOfConfig":"33"},{"size":63,"mtime":1666200920630,"results":"48","hashOfConfig":"33"},{"size":902,"mtime":1666256912161,"results":"49","hashOfConfig":"33"},{"size":2432,"mtime":1666273820895,"results":"50","hashOfConfig":"33"},{"size":150,"mtime":1666259112323,"results":"51","hashOfConfig":"33"},{"size":152,"mtime":1666272560534,"results":"52","hashOfConfig":"33"},{"size":856,"mtime":1666259112312,"results":"53","hashOfConfig":"33"},{"size":842,"mtime":1666269565486,"results":"54","hashOfConfig":"33"},{"size":3303,"mtime":1666274666571,"results":"55","hashOfConfig":"33"},{"size":66,"mtime":1666256912167,"results":"56","hashOfConfig":"33"},{"size":51,"mtime":1666272405148,"results":"57","hashOfConfig":"33"},{"size":72,"mtime":1666257078636,"results":"58","hashOfConfig":"33"},{"size":3414,"mtime":1666271287124,"results":"59","hashOfConfig":"33"},{"size":146,"mtime":1666268636351,"results":"60","hashOfConfig":"33"},{"size":1431,"mtime":1666272035649,"results":"61","hashOfConfig":"33"},{"size":671,"mtime":1666274379020,"results":"62","hashOfConfig":"33"},{"size":977,"mtime":1666271229133,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"j8abd4",{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"134"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/index.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/reportWebVitals.ts",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/App.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/store/configureStore.ts",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/store/index.ts",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/index.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/store/common/reducers.ts",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/Layout.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/store/common/types.ts",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/Header/HeaderD.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/Header/HeaderM.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/Body/index.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Layout/Body/Body.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/index.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Home/index.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/index.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Home/Home.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/Dashboard.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/TabsContent/index.ts",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/index.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/TabsContent/Connection.tsx",["160","161","162","163","164","165"],[],"import React, {FC, ReactNode, useState} from \"react\";\nimport '../styles.scss';\nimport {useSelector} from \"react-redux\";\nimport {State} from \"../../../store\";\nimport {ArrowForward, FileCopy} from \"@material-ui/icons\";\nimport {Navigate} from \"react-router-dom\";\nimport {setConnection} from \"../../../store/common/actions\";\nimport {DashboardRow} from \"../../../components\";\n\nconst Connection: FC = () => {\n    const {smallScreen, connection} = useSelector((state: State) => state.common);\n\n    return (\n        <div id='connection' className={smallScreen ? 'm' : ''}>\n            <DashboardRow title='Status' value={<><span className='green-dot'/> Connected</>}/>\n            <DashboardRow title='Network' value={connection?.network}/>\n            <DashboardRow title='Address' value={connection?.address}/>\n        </div>\n    )\n}\n\n\nexport default Connection;","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/TabsContent/Wallet.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/Views/Dashboard/TabsContent/Operations.tsx",["166","167","168"],[],"import React, {FC, useState} from \"react\";\nimport '../styles.scss';\nimport {useSelector} from \"react-redux\";\nimport {State} from \"../../../store\";\nimport {DashboardRow, Modal} from \"../../../components\";\nimport {ethers} from \"ethers\";\nimport {WETH_ADDRESS} from \"../../../constants\";\nimport WETH from '../../../WETH.json'\nimport {CheckCircle, CheckOutlined} from \"@material-ui/icons\";\nimport {ClipLoader} from \"react-spinners\";\n\nconst etherscan = 'https://sepolia.etherscan.io/'\n\nconst Operations: FC = () => {\n    const {smallScreen, connection, provider, signer} = useSelector((state: State) => state.common);\n    const [ethToConvert, setEthToConvert] = useState<string>('0')\n    const [swapping, setSwapping] = useState<boolean>(false)\n    const [lastTransaction, setLastTransaction] = useState<any>(null)\n\n    const swap = async () => {\n        if (ethToConvert === '0' || !ethToConvert) return alert('Please enter amount larger than 0!')\n        setSwapping(true)\n        const signer = await provider!.getSigner()\n        const wethContract = new ethers.Contract(WETH_ADDRESS, WETH.abi, signer);\n        try {\n            const transaction = await wethContract.deposit({\n                from: connection!.address,\n                value: ethers.utils.parseEther(ethToConvert)\n            });\n            const res = await transaction.wait();\n            console.log(res);\n            setSwapping(false)\n            setLastTransaction(res)\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    return (\n        <div id='wallet' className={smallScreen ? 'm' : ''}>\n            <DashboardRow title='Convert your ETH to WETH' noAnimation onGoClicked={swap} loading={swapping} value={\n                <CustomInput value={ethToConvert} onChange={setEthToConvert}\n                             balance={ethers.utils.formatEther(connection!.ethBalance)}\n                />\n            }/>\n            <DashboardRow title='NEXO Balance' value={ethers.utils.formatEther(connection!.nexoBalance)}/>\n\n            <Modal title='Converting' text='We are processing your transaction, please wait.'\n                   icon={<ClipLoader size='18'/>} visible={swapping} />\n\n\n            <Modal\n                visible={lastTransaction}\n                icon={<CheckCircle/>}\n                title='Transaction sent'\n                onOk={() => setLastTransaction(null)}\n                text={<>\n                        You can see your transaction in the&nbsp;\n                        <a href={`${etherscan}/tx/${lastTransaction && lastTransaction.transactionHash}`} target='_blank'>\n                            block explorer\n                        </a>\n                    </>}\n            />\n        </div>\n    )\n}\n\ninterface CustomInputProps {\n    onChange: (val: string) => void;\n    value: string;\n    balance?: any;\n}\n\nconst CustomInput: FC<CustomInputProps> = ({onChange, value, balance}) => {\n    return (\n        <div className='row-input'>\n            {balance && <span className='balance' onClick={() => onChange(balance)}>Total {balance}</span>}\n            <input\n                placeholder='0.0'\n                value={value}\n                type='number'\n                onChange={(e) => onChange(e.target.value)}\n            />\n        </div>\n    )\n}\n\nexport default Operations;","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/ConnectBox/index.ts",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/Modal/index.ts",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/DashboardRow/index.ts",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/ConnectBox/ConnectBox.tsx",["169"],[],"import React, {FC, useState} from \"react\";\nimport './styles.scss';\nimport {ChevronRight, Info, CheckCircle} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {State} from \"../../store\";\nimport {setConnection, setProvider, setSigner} from \"../../store/common/actions\";\nimport {ClipLoader} from 'react-spinners'\nimport {useNavigate} from \"react-router-dom\";\nimport {ethers, BigNumber} from \"ethers\";\nimport {Connection as ConnectionType} from '../../models'\nimport {WETH_ADDRESS, NEXO_ADDRESS} from \"../../constants\";\n\nconst MetaMaskLink = 'https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en';\n\n\n\ninterface Props {\n\n}\n\nconst ConnectBox: FC<Props> = () => {\n    const {connection} = useSelector((state: State) => state.common)\n    const [connecting, setConnecting] = useState(false)\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n\n    const connectAccount = async () => {\n        setConnecting(true)\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum)\n        await provider.send('eth_requestAccounts', [])\n        const signer = await provider.getSigner()\n\n\n        const connection: ConnectionType = {\n            address: await signer.getAddress(),\n            network: (await provider.getNetwork()).name,\n            ethBalance: await signer.getBalance(),\n            wethBalance: await provider.getBalance(WETH_ADDRESS),\n            nexoBalance: await provider.getBalance(NEXO_ADDRESS)\n        }\n\n        console.log(typeof provider)\n\n        dispatch(setConnection(connection))\n        dispatch(setProvider(provider))\n        dispatch(setSigner(signer))\n\n        setConnecting(false)\n\n    }\n\n    return (\n        <div id='call-to-action'>\n            {/* icon */}\n            {!connection ? <Info/> : <CheckCircle className='check'/>}\n\n            {/* title */}\n            <p className='title'>\n                {\n                    !connection\n                        ? 'Start by connection your MetaMask wallet'\n                        : 'You are connected to your MetaMask wallet'\n                }\n            </p>\n\n            {/* text */}\n            <p className='instructions'>\n                {\n                    !connection\n                        ? <>Make sure you have MetaMask installed, you can get the free browser extension <a\n                            rel=\"noreferrer\" target='_blank' href={MetaMaskLink}>here</a>.</>\n                        : <>To check your balance and manage your wallet go to the&nbsp;\n                            <span onClick={() => navigate('/dashboard')}>nexo dashboard</span></>\n                }\n            </p>\n\n            {/* call to action*/}\n            <ConnectButton visible={!connection && window.ethereum} connecting={connecting}\n                           onClick={connectAccount}/>\n        </div>\n    )\n}\n\ninterface ConnectButtonProps {\n    visible: boolean;\n    connecting: boolean;\n    onClick: () => void;\n}\n\nconst ConnectButton: FC<ConnectButtonProps> = ({visible, connecting, onClick}) => {\n    if (!visible) return null;\n\n    return (\n        <button disabled={connecting} onClick={onClick}>\n            {\n                connecting\n                    ? <>Connecting &nbsp;<ClipLoader size={12}/></>\n                    : <>Connect <ChevronRight/></>\n            }\n        </button>\n    )\n}\n\nexport default ConnectBox;","/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/constants/index.ts",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/DashboardRow/DashboardRow.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/components/Modal/Modal.tsx",[],[],"/Users/georgikrastev/Desktop/Nexo_Explorer/Nexo/src/store/common/actions.ts",[],[],{"ruleId":"170","severity":1,"message":"171","line":1,"column":20,"nodeType":"172","messageId":"173","endLine":1,"endColumn":29},{"ruleId":"170","severity":1,"message":"174","line":1,"column":31,"nodeType":"172","messageId":"173","endLine":1,"endColumn":39},{"ruleId":"170","severity":1,"message":"175","line":5,"column":9,"nodeType":"172","messageId":"173","endLine":5,"endColumn":21},{"ruleId":"170","severity":1,"message":"176","line":5,"column":23,"nodeType":"172","messageId":"173","endLine":5,"endColumn":31},{"ruleId":"170","severity":1,"message":"177","line":6,"column":9,"nodeType":"172","messageId":"173","endLine":6,"endColumn":17},{"ruleId":"170","severity":1,"message":"178","line":7,"column":9,"nodeType":"172","messageId":"173","endLine":7,"endColumn":22},{"ruleId":"170","severity":1,"message":"179","line":9,"column":22,"nodeType":"172","messageId":"173","endLine":9,"endColumn":35},{"ruleId":"170","severity":1,"message":"180","line":15,"column":47,"nodeType":"172","messageId":"173","endLine":15,"endColumn":53},{"ruleId":"181","severity":1,"message":"182","line":59,"column":25,"nodeType":"183","messageId":"184","endLine":59,"endColumn":123,"fix":"185"},{"ruleId":"170","severity":1,"message":"186","line":9,"column":17,"nodeType":"172","messageId":"173","endLine":9,"endColumn":26},"@typescript-eslint/no-unused-vars","'ReactNode' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'ArrowForward' is defined but never used.","'FileCopy' is defined but never used.","'Navigate' is defined but never used.","'setConnection' is defined but never used.","'CheckOutlined' is defined but never used.","'signer' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"187","text":"188"},"'BigNumber' is defined but never used.",[2588,2588]," rel=\"noreferrer\""]